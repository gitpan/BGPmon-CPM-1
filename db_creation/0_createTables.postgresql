/* 
To create the database, run this file through psql like so:
prompt> psql -f 0_createTables.postgresql bgpmon_cpm_db bgpmon_cpm_user 
*/
drop table if exists authoritative_for;
drop table if exists search_using;
drop table if exists named_as;
drop table if exists prefixes;
drop table if exists search_paths;
drop table if exists lists;
drop table if exists domains;
drop function if exists pref_del();
drop function if exists list_del();


create table lists (
  dbid SERIAL PRIMARY KEY,
  name char(255) UNIQUE NOT NULL
);
comment on table lists is 'Describes logical groups of prefixes as names lists.';

create table domains (
  dbid SERIAL PRIMARY KEY,
  domain char(255) UNIQUE NOT NULL
);

create table search_paths (
  dbid SERIAL PRIMARY KEY,
  path char(255) UNIQUE NOT NULL
);

create table prefixes (
  dbid SERIAL PRIMARY KEY,
  prefix cidr NOT NULL,
  watch_more_specifics boolean NOT NULL,
  watch_covering boolean NOT NULL,
  list_dbid int references lists(dbid),
  UNIQUE(prefix,list_dbid)
);
comment on table prefixes is 'Each prefix has a row in this table and may have several.';

create table authoritative_for (
  prefix_dbid int references prefixes(dbid) NOT NULL,
  domain_dbid int references domains(dbid) NOT NULL,
  PRIMARY KEY(prefix_dbid,domain_dbid)
);
comment on table authoritative_for is 'Only DNS prefixes are authoritative for domains, and they may be so for many.';

create table search_using (
  prefix_dbid int references prefixes(dbid) NOT NULL,
  search_path_dbid int references search_paths(dbid) NOT NULL,
  PRIMARY KEY(prefix_dbid,search_path_dbid)
);

create table named_as (
  prefix_dbid int references prefixes(dbid) NOT NULL,
  domain_dbid int references domains(dbid) NOT NULL,
  PRIMARY KEY(prefix_dbid,domain_dbid)
);

CREATE FUNCTION pref_del() RETURNS trigger AS $$
    BEGIN
        DELETE FROM authoritative_for WHERE prefix_dbid = OLD.dbid ;
        DELETE FROM named_as WHERE prefix_dbid = OLD.dbid ;
        DELETE FROM search_using WHERE prefix_dbid = OLD.dbid ;
        RETURN OLD;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER pref_del_m2m
BEFORE DELETE ON prefixes
    FOR EACH ROW EXECUTE PROCEDURE pref_del();

CREATE FUNCTION list_del() RETURNS trigger AS $$
    BEGIN
        DELETE FROM prefixes WHERE list_dbid = OLD.dbid ;
        RETURN OLD;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER list_del_m2m
BEFORE DELETE ON lists 
    FOR EACH ROW EXECUTE PROCEDURE list_del();

